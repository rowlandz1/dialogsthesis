Current state of affairs
------------------------

Model 1: Rewrite rules
 - Haskell rewrite rules (without up-arrows) and with the other operations
 - Supports a version of the W mnemonic that means full interweaving.
 - Dialog represented as a datatype

Model 2: Stack-based semantics

  Model 2a: Scheme implementation
    - Supports up-arrow notation, but not full set of mnemonics.
    - Dialogs represented as lambda expressions

  Model 2b: Haskell implementation
    - Supports up-arrow notation, full set of mnemonics, and unions.
    - Staging is defined using the formal reduction semantics described
      in the Overleaf document.
    - Dialogs represented as a datatype

Mode 3: Process based

  Model 3a: Golang implementation (Zachary's preference)
    - Supports up-arrow notation, but not full set of mnemonics

  Model 3b: Elixer implementation.
    - Supports up-arrow notation, but not full set of mnemonics

TODO
----

Clean up document using style in the link I sent you.

Improve model 3a or 3b:
 - Add other dialog operators
 - Build recursive function to create a process tree
   - NOTE: this is almost done, but it's clunky and doesn't support the up-arrows yet.
 - Unhardcode input

Think about evaluation

2 CASE STUDIES

LIT REVIEW (COMPARISON)


March 25, 2022

* think of better name or acronym to replace PL-notation; if we use PL-notation, typeset it as \textsc{pl}-notation

* think more about theoretical evaluation (look at two papers in the published and think if there is a way you can demonstrate clearly that you have advanced the needle).

* explain idea about theoretical evaluation and why its hard

in Model chapter, relate the specification of a dialog in the PL-notation to one or more partial orderings (represented as Hasse diagams (use Dotty)), where the goal to find the minimal expression or minimum number of partial orders(hasse diagrams) that model all of the required epidoes.


